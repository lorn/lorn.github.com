<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: yapc | lornlab.]]></title>
  <link href="http://lornlab.org/blog/categories/yapc/atom.xml" rel="self"/>
  <link href="http://lornlab.org/"/>
  <updated>2012-06-29T14:24:25-03:00</updated>
  <id>http://lornlab.org/</id>
  <author>
    <name><![CDATA[Lindolfo 'Lorn' Rodrigues]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Busca Pelo Deploy Contínuo - Parte 3]]></title>
    <link href="http://lornlab.org/blog/2011/12/03/a-busca-pelo-deploy-continuo-parte-3/"/>
    <updated>2011-12-03T10:03:00-02:00</updated>
    <id>http://lornlab.org/blog/2011/12/03/a-busca-pelo-deploy-continuo-parte-3</id>
    <content type="html"><![CDATA[<div id="litlebox">
Você está lendo a Parte 3 sobre "A Busca pelo deploy contínuo" eu recomendo você a começar pela <a href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-1/">Parte 1</a> e depois ler a <a href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-2/">Parte 2</a> se você já o fez, continue ;)
</div>


<p>Agora um exemplo de arquitetura para facilitar o uso do deploy continuo usando um <a href="http://en.wikipedia.org/wiki/Load_balancing_(computing">Load Balancer</a>).</p>

<p>Você não precisa de applicances milionários para fazer isso <a href="http://www.anchor.com.au/blog/2009/10/load-balancing-at-github-why-ldirectord/">o github</a>, serve 2500 conexões TCP por <strong>SEGUNDO</strong> usando o <a href="http://horms.net/projects/ldirectord/">ldirectord</a> em uma máquina Xen com 128mb.</p>

<p>Com um Load Balance, você consegue testar funcionalidades novas no site para uma pequena porção dos usuários do site e usar os gráficos ( que você já tem lógico ) para ver se ela é boa ou não.</p>

<p>Como fazer isso? faça o deploy para apenas 1 das 'n' máquinas que você tem atrás do Load Balancer e redirecione, 5% ~ 10% das suas conexões dos seus usuários para essa máquina, o resto os gráficos que você preparou da sua aplicação irão te dizer ;)</p>

<p>Falando um pouco mais de arquitetura, e especificamente de Perl, eu gosto bastante de usar o Nginx + Starman a comunicação é feita via Unix Socket o Starman foi baseado no Unicorn do Ruby, ele funciona muito bem e...</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/dFUlAQZB9Ng" frameborder="0" allowfullscreen></iframe>


<p>"It's a unix system I known this!" arquiteturas unix, forks, sockets e afins funcionam muito bem :)</p>

<p>O seu deploy consistiria em copiar os arquivos novos e mandar um sinal de reset para o pid do Starman:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kill -s USR2 1337</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ele vai recarregar o código, e vai reiniciar todos os seus fork assim que eles forem ficando sem conexões ou seja para seus usuários a percepção de downtime será <strong>ZERO!</strong></p>

<p>Abaixo uma conf de exemplo para se usar no Nginx para se conectar a um socket gerado pelo Starman:</p>

<p><div><script src='https://gist.github.com/1126172.js?file='></script>
<noscript><pre><code>=pod

=encoding utf8

=head1 Uma arquitetura de alta disponibilidade usando Starman

Continuando a introdução dada pelo L&lt;nosso amigo que vence guerras|http://sao-paulo.pm.org/equinocio/2012/mar/13&gt;, falarei um pouco mais sobre o Starman e, como ele, não falarei sobre PSGI/Plack porque esses assuntos já foram muito bem explorados L&lt;em outros|http://sao-paulo.pm.org/artigo/2010/PSGI&gt; e L&lt;equinocios|http://sao-paulo.pm.org/equinocio/2011/set/11&gt;.

Essa arquitetura é baseada na arquitetura que o Github usa/usava que eles explicam L&lt;nesse post|https://github.com/blog/517-unicorn&gt; eles falam sobre como eles utilizam o Unicorn, o Starman foi baseado nesse cara o Miyagawa inclusive usou o nome Unicorn como &quot;inspiração&quot; para o nome Starman:

&quot;The name Starman is taken from the song (Star na Otoko) by the Japanese rock band Unicorn (yes, Unicorn!). It's also known as a song by David Bowie, a power-up from Super Mario Brothers and a character from Earthbound, all of which I love.&quot;

Mais um pouco sobre a historia do nome do Starman no blog dele:

L&lt;Good name for Perl UNIX forking web server?|http://bulknews.typepad.com/blog/2010/02/good-name-for-perl-unix-forking-web-server.html&gt;

O fonte desse artigo, assim como todos os arquivos de configuração e inicialização estão nesse L&lt;gist|https://gist.github.com/1126172&gt; não fique copiando e colando daqui, você pode pegar o arquivo separado lá ;)

=head2 Sendo amigo do seu syadmin

Eu fiz uma busca no APT agora, e não vi nenhum pacote do Starman. 

Mas isso não significa que você vai jogar essa bomba na mão do seu sysadmin, seja gentil com ele como diria o Bruce Lee:

   &quot;Be L&lt;Devops my friend|http://devops.com/&gt;&quot;

Faça scripts de inicialização, não é algo tão dificil e Shell Script é uma linguagem fácil L&lt;e que faz de você um desenvolvedor melhor|http://zachholman.com/posts/glue-languages/&gt; eu precisei subir o Starman em um CentOS e no Debian, abaixo estão os arquivos de inicialização para cada uma dessas distribuições a versão do Debian teve a revisão e ajustes do Nuba - eu tinha esquecido algum header/conf ;)

Debin:

    #!/bin/bash
     
    ### BEGIN INIT INFO
    # starman - this script starts and stops the starman daemon
    # Provides:          starman_sppm
    # Required-Start:    $local_fs $remote_fs $network $syslog
    # Required-Stop:     $local_fs $remote_fs $network $syslog
    # Default-Start:     2 3 4 5
    # Default-Stop:      0 1 6
    # Short-Description: starts the starman server
    # Description:       starts starman using start-stop-daemon
    ### END INIT INFO
     
    NAME=starman
    DESC=starman
     
    test -x $DAEMON || exit 0
     
    set -e
     
    . /lib/lsb/init-functions
    ## Variáveis de conf da sua App, ALTERE ISSO ANTES DE QUALQUER COISA.
    export starman=&quot;/usr/bin/starman&quot;
    export myapp_path=&quot;/var/www/myapp&quot;
    export pidfile=&quot;/var/run/starman.pid&quot;
     
     
    start() {
            echo -n $&quot;Starting Starman: &quot;
            ## eu inicio o starman para debug na porta 8080, é bom para testar algumas coisas dando bypass no nginx e tanto o log, quando o PID são criados com o usuário do nginx, para ficar mais fácil 
            $starman -I${myapp_path}/lib --user=nginx --listen :8080 --listen /var/run/nginx/starman.sock --daemonize --pid ${pidfile} --error-log /var/log/nginx/starman.log ${myapp_path}/${myapp}.psgi
            RETVAL=$?
            echo
            [ $RETVAL = 0 ]
            return $RETVAL
    }
     
    restart() {
            echo -n $&quot;Restarting Starman: &quot;
            export PID=`cat ${pidfile}`
            kill -s USR2 $PID 
            RETVAL=$?
            echo
            [ $RETVAL = 0 ]
            return $RETVAL
    }
     
    stop() {
            echo -n $&quot;Stopping Starman: &quot;
            killproc -p ${pidfile} -d 10 $starman
            RETVAL=$?
            echo
            [ $RETVAL = 0 ] &amp;&amp; rm -f ${pidfile}
    }
    # See how we were called.
    case &quot;$1&quot; in
      start)
            start
            ;;
      restart)
            restart
             ;;
      stop)
            stop
            ;;
      *)
            echo $&quot;Usage: starman {start|restart|stop}&quot;
            exit 1
    esac
     
    exit $RETVAL

CentOS

    #!/bin/bash
     
    # starman - this script starts and stops the starman daemon
    #
    # chkconfig:   - 85 15
    # description: Starman 
    # processname: starman
    # pidfile :    /var/run/starman.pid
    # www file:    /var/www/myapp
     
     
    # Source function library.
    . /etc/rc.d/init.d/functions
     
    ## Variáveis de conf da sua App, ALTERE ISSO ANTES DE QUALQUER COISA.
    export starman=&quot;/usr/bin/starman&quot;
    export myapp_path=&quot;/var/www/myapp&quot;
    export pidfile=&quot;/var/run/starman.pid&quot;
     
     
    start() {
            echo -n $&quot;Starting Starman: &quot;
            ## eu inicio o starman para debug na porta 8080, é bom para testar algumas coisas dando bypass no nginx e tanto o log, quando o PID são criados com o usuário do nginx, para ficar mais fácil 
            $starman -I${myapp_path}/lib --user=nginx --listen :8080 --listen /var/run/nginx/starman.sock --daemonize --pid ${pidfile} --error-log /var/log/nginx/starman.log ${myapp_path}/${myapp}.psgi
            RETVAL=$?
            echo
            [ $RETVAL = 0 ]
            return $RETVAL
    }
     
    restart() {
            echo -n $&quot;Restarting Starman: &quot;
            export PID=`cat ${pidfile}`
            kill -s USR2 $PID 
            RETVAL=$?
            echo
            [ $RETVAL = 0 ]
            return $RETVAL
    }
     
    stop() {
            echo -n $&quot;Stopping Starman: &quot;
            killproc -p ${pidfile} -d 10 $starman
            RETVAL=$?
            echo
            [ $RETVAL = 0 ] &amp;&amp; rm -f ${pidfile}
    }
    # See how we were called.
    case &quot;$1&quot; in
      start)
            start
            ;;
      restart)
            restart
             ;;
      stop)
            stop
            ;;
      *)
            echo $&quot;Usage: starman {start|restart|stop}&quot;
            exit 1
    esac
     
    exit $RETVAL

=head2 Nginx + Starman


Como vocês leram, ou não, no post do github a arquitetura deles consistem em usar o servidor do Unicorn atrás do Nginx e a comunidação entre eles é feita via Unix Socket \,,/ 

O Nginx fala diretamente com os &quot;workers&quot; do Starman atráves do Starman Master, quando o Starman inicia ele sobe 'n' workers que são controlados pelo processo principal, toda requisição é processado pelos workers.

Com isso você ganha algumas funcionalidades interessantes como hotdeploy, que é o ato de você subir uma nova versão da sua aplicação com ZERO DOWNTIME!!!!111

Como funciona, basta você atualizar os arquivos da sua aplicação - não irá alterar nada até você reiniciar o serviço - e na hora de reiniciar o serviço é só mandar o sinal USR2 para o PID Master do Starman, isso irá dizer para ele que a aplicação precisa ser reiniciada ele irá reiniciar os seus workers paulatinamente, assim que eles ficarem ociosos até que todos estejam rodando a nova versão da aplicação.

Ah, a função restart dos arquivos de inicialização que eu falei lá em cima já faz esse trabalho :)

Por padrão o Starman inicia apenas 5 workers, eles podem aguentar bastante coisa, mas dependendo da sua configuração de hardware você pode ter mais mas cuidado com swap, se a memoria está indo para swap é bom você diminuir esse número.

    upstream myapp_starman {
      server unix:/tmp/starman.sock fail_timeout=0;
    }
   
    server {
      listen 80;
   
    client_max_body_size 1024m;
    client_body_buffer_size 8k;
    proxy_read_timeout 300;
   
    ##
    # basic
    ##
    server_name www.localhost.com;
    root /home/user/MyApp/root;
    keepalive_timeout 0;
   
    ##
    # logging
    ##
    access_log /var/log/nginx/myapp.access combined;
    error_log /var/log/nginx/myapp.error;
    
    location /static {
          root  /home/user/MyApp/root/;
          autoindex on;
    }
   
    ##
    # proxy
    ##
    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_buffering off;
      if (!-f $request_filename) {
        proxy_pass http://myapp_starman;
      }
    }
   }

=head1 AUTHOR 

Lindolfo &quot;Lorn&quot; Rodrigues - lorn at cpan.org

=cut
</code></pre></noscript></div>
</p>

<p>Bom, basicamente é isso se tiver alguma duvida pergunte nos comentários :)</p>

<h2>Bibliografia</h2>

<p>Alguns slides foram copiados dessa palestra da etsy:</p>

<div style="width:425px" id="__ss_8727786"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/OReillyOSCON/put-a-button-on-it-removing-barriers-to-going-fast" title="Put a Button on It: Removing Barriers to Going Fast" target="_blank">Put a Button on It: Removing Barriers to Going Fast</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/8727786" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more presentations from <a href="http://www.slideshare.net/OReillyOSCON" target="_blank">OSCON </a> </div> </div>


<p>E outros foram copiados dessa palestra da AOE Media</p>

<div style="width:425px" id="__ss_5345889"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/typo3media/continuous-deployment-5345889" title="Continuous deployment" target="_blank">Continuous deployment</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/5345889" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/typo3media" target="_blank">Daniel</a> </div> </div>


<p>Obrigado :) qualquer dúvida estou a disposição nos comentários.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Busca Pelo Deploy Contínuo - Parte 2]]></title>
    <link href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-2/"/>
    <updated>2011-12-02T11:23:00-02:00</updated>
    <id>http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-2</id>
    <content type="html"><![CDATA[<div id="litlebox">
Você está lendo a Parte 2 sobre "A Busca pelo deploy contínuo" eu recomendo você a começar pela <a href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-1/">Parte 1</a> mas se já leu as duas partes, leia a <a href="http://lornlab.org/blog/2011/12/03/a-busca-pelo-deploy-continuo-parte-3/">Parte 3</a>.
</div>


<p>Agora que você já está convencido que precisa disso, ou não, vou começar a falar de algumas ferramentas/técnicas que você pode usar para te ajudar no processo:</p>

<ul>
<li><p>SCM - Software Configuration Management</p>

<p>Também conhecido como VCS ( Version Control System ), você precisa disso, se você não tem <strong>há algo muito errado</strong> e se você está usando Subversion, isso não é tão ruim, mas comece a usar git a partir de hoje, sério.</p></li>
<li><p>Testes</p>

<p>Se você acha que teste é besteira, então deploy continuo é besteira para você também. É impossível ter um deploy contínuo confiável sem testes</p></li>
<li><p>Continuos Integration Software</p>

<p>Esse tipo de software tem um papel simples, porem eficaz, ele fica fazendo "pooling" no seu SCM, a cada commit seu ele vai rodar o seu processo de "build" para ver se ele continua funcionando depois do código que você acabou de comitar, um processo de build pode conter:</p>

<ul>
<li>Gerar pacotes</li>
<li>Verificar códigos/dependências</li>
<li>Testes Unitários</li>
<li>Testes de Integração</li>
<li>Testes de Segurança</li>
<li>Testes funcionais</li>
</ul>


<p>E caso algum teste tenha parado de funcionar, ele vai te enviar um email avisando que o build está quebrado.</p>

<p>Eu uso e gosto bastante do <a href="http://jenkins-ci.org/">Jenkins</a>, conhecido antes como Hudson. Mas há muitos outros por ai, você só precisa escolher um.</p></li>
<li><p>Script de Deploy/Rollback para você começar, depois de ter todas essas coisas acima, você já pode a pensar em automatizar seu processo de deploy/rollback.</p>

<ul>
<li>./deploy.sh    # faz o deploy</li>
<li>./rollback.sh  # faz o rollback do ultimo deploy</li>
</ul>


<p>Simples assim, mas tem que ser um script só que faz todo o trabalho, copiar arquivos, reinciar webserver etc</p>

<p>Na Etsy quando o script ficou avançado eles evoluiram para um software web, que inclusive é opensource mais detalhes aqui: <a href="http://codeascraft.etsy.com/2010/05/20/quantum-of-deployment/">Deploynator Etsy</a></p></li>
<li><p>Puppet/Chef - eu não sei qual o nome dessa categoria de software, o que você faz com eles é escrever "receitas" de máquinas, imagine que a empresa está crescendo e você precisa montar 10 novos webservers que incluem:</p>

<ul>
<li>Instalar SO</li>
<li>Configurar SO</li>
<li>Configurar Firewall</li>
<li>Configurar Webserver</li>
<li>Configurar seu sistema</li>
<li>Colocar ela no pool de webservers</li>
</ul>


<p>Tirando a instalação do Linux, todo o resto você pode automatizar com puppet ou chef você cria receitas nele dizendo como ele vai configurar seu Webserver, seu sistema e depois é só executar essa receita na máquina ele vai instalar o pacote e fazer todo o trabalho pra você.</p>

<p>E você vai precisar fazer isso UMA vez para 'n' maquinas, e quando precisar mudar algo e só alterar na receita ele mantém as maquinas sincronizadas com sua receitas, nada de sair editando o mesmo arquivo em várias máquinas.</p></li>
<li><p>Monitoramento</p>

<ul>
<li><p>Sistema Base/Nagios</p>

<p>Você precisa monitorar o estado do seu sistema, vê se o Apache tá de pé se o disco tá cheio isso é bem comum, no minímo você já ouviu falar.</p></li>
<li><p>Seu negócio</p>

<p>Você precisa também monitorar o seu negócio, você precisa saber que horas que acontecem mais vendas e precisa saber agora, nada de rodar aquela query no banco de dados <strong>faça gráfico de toda informação que você puder monitorar</strong>.</p>

<p>Além desses gráficos ajudar o pessoal de Marketing/Vendas vai te ajudar quando entrar alguma funcionalidade nova no site, porque sempre tem um espertão na empresa, e muitas vezes esse espertão é o dono, que vai dizer:</p>

<p><blockquote><p>Acho que depois que você colocou aquela funcionalidade no site, o site está vendendo menos, estou com esse pressentimento.</p></p><p><ul><br/><li>Espertão</p></blockquote></li>
</ul>


<p>A Etsy liberou recentemente a ferramente que eles fizeram para fazer gráficos, vale a pena dar uma olhada <a href="http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/">Measure Anything, Measure Everything</a> eles contam bastante expêriencia deles com geração de gráfico para tudo, até para a quantidade de café na cozinha!</p>

<p>Então tenha gráficos de tudo e mostre para ele no melhor sentido <a href="https://twitter.com/opachefe">Opa chefe! tranquilo chefe!</a>.</p></li>
</ul>
</li>
</ul>


<h2>Continua ..</h2>

<div id="litlebox">
Você está lendo a Parte 2 sobre "A Busca pelo deploy contínuo" eu recomendo você a começar pela <a href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-1/">Parte 1</a> mas se já leu as duas partes, leia a <a href="http://lornlab.org/blog/2011/12/03/a-busca-pelo-deploy-continuo-parte-3/">Parte 3</a>.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Busca Pelo Deploy Contínuo - Parte 1]]></title>
    <link href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-1/"/>
    <updated>2011-12-02T11:23:00-02:00</updated>
    <id>http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-1</id>
    <content type="html"><![CDATA[<div id="litlebox">
Você está lendo a Parte 1 sobre "A Busca pelo deploy contínuo" esse post tem mais duas continuações: <a href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-2/">Parte 2</a> e <a href="http://lornlab.org/blog/2011/12/03/a-busca-pelo-deploy-continuo-parte-3/">Parte 3.</a>
</div>


<p>No dia 05/11 apresentei  no <a href="http://www.yapcbrasil.org.br/2011/">YAPC::Brasil</a> uma palestra com o nome
"Em busca do deploy continuo" nesse post vou tentar descrever sobre tudo o que eu falei.</p>

<div style="width:425px" id="__ss_10173611"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/lornlab/a-busca-pelo-deploy-continuo" title="A busca pelo deploy continuo" target="_blank">A busca pelo deploy continuo</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/10173611" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/lornlab" target="_blank">Lindolfo Rodrigues Oliveira Neto</a> </div> </div>


<h2>Como começar?</h2>

<p>Infelizmente o principal problema do "Deploy Continuo" não é técnico e sim cultural, e mudança de cultura é muito mais difícil que mudança de Banco de Dados ou de Linguagem de Programação é enraizado nas fundações da empresa, esses são alguns exemplos culturais:</p>

<ul>
<li><p>Falta de confiança</p></li>
<li><p>Processos complicado/complexos para tudo</p></li>
</ul>


<p><blockquote><p>Processo é uma reação à estupidez incorporada antes<br/> - Clay Shirky</p></blockquote></p>

<p> Em português claro, esse seria o famoso "vai que..." :</p>

<ul>
<li>Vai que alguém faz uma alteração errada e o site fica fora do ar</li>
<li>Vai que alguém cria uma tabela nova e o site fica fora do ar.</li>
</ul>


<p>Ainda bem que esse pessoal de processo não conhece o <a href="http://pt.wikipedia.org/wiki/Efeito_borboleta">Efeito Borboleta</a> se não eles iam criar coisas bem piores.</p>

<p>Em Startups esse tipo de coisa não acontece porque, geralmente, se tem pouco recurso e é necessário já pensar em Deploy/Integração continua desde o início, pois você precisa entregar valor para seu usuário para continuar vivo, você não tem uma receita fixa.</p>

<p>Então, se você for esperar a próxima madrugada para subir a funcionalidade que já está pronta, , fica dificil pivotear talvez essa funcionalidade não seja bem vista por seus usuários, eles entenderam errado, então é necessário não só coloca-la rápida em produção como tirar rápido também :)</p>

<p>Imagine demorar 48h para concluir esse fluxo todo, você pode perder usuários preciosos.</p>

<p>O <a href="http://github.com">github.com</a> que é era uma startup e agora, mesmo depois de passar dos 40 funcionários, continua com as mesmas idéias de desenvolvimento baseado em software livre e deploy contínuo.</p>

<p>Caso você queira conhecer como funciona o processo de desenvolvimento/trabalho no github, eu recomendo a lida desse <a href="http://zachholman.com/posts/how-github-works/">post do Zach Holman</a> que é um dos funcionário mais antigos por lá e caso você não queira conhecer :)</p>

<p>Recentemente <a href="http://zachholman.com/talk/how-github-uses-github-to-build-github">ele deu uma palestra</a> falando um pouco mais sobre isso e como se usar o github como plataforma para esse processo ser aplicado em qualquer empresa.</p>

<p>Mas até agora, eu sou falei de empresinhas pequenas, por mais que elas ganhem algum dinheiro não tem um nome a zelar.</p>

<p><blockquote><p>Quero ver isso funcionar em uma empresa grande!<br/> - Cara de processo</p></blockquote></p>

<p>Funciona, vou te dizer dois exemplos:</p>

<ul>
<li><p>Amazon</p></li>
<li><p>Etsy</p></li>
</ul>


<p>A <a href="http://amazon.com">Amazon</a> chegou a divulgar em um apresentação na Velocity 2011 que faz um deploy a cada 11.6 segundos e você aí feliz por ter conseguido uma janela mais cedo para fazer seu deploy né?</p>

<p>A <a href="http://etsy.com">Etsy</a>, não é muito famosa aqui no Brasil, e a conheci ela antes de me interessar sobre deploy continuo comprei um adesivo com uma frase de StarWars lá :) eles funcionam como um Mercado Livre para artesões e outras profissões "hand-made".</p>

<p>Eles tem a bagatela de 1 bilhão de pageview por mês!</p>

<p>Caso você queira entender como funciona o deploy continuo na Etsy, e como era a vida deles antes do deploy continuo veja essa palestra:</p>

<iframe width="560" height="340" src="http://cdn.livestream.com/embed/etsy?layout=4&amp;clip=pla_adbab6e2-c629-4bfe-b1fd-21c898693282&amp;height=340&amp;width=560&amp;autoplay=false" style="border:0;outline:0" frameborder="0" scrolling="no"></iframe>


<div style="font-size: 11px;padding-top:10px;text-align:center;width:560px">Watch <a href="http://www.livestream.com/?utm_source=lsplayer&amp;utm_medium=embed&amp;utm_campaign=footerlinks" title="live streaming video">live streaming video</a> from <a href="http://www.livestream.com/etsy?utm_source=lsplayer&amp;utm_medium=embed&amp;utm_campaign=footerlinks" title="Watch etsy at livestream.com">etsy</a> at livestream.com</div>


<p>Tudo isso começou na Etsy, porque um ex-flickr foi contratado para ser o CTO lá e o flickr foi bem pioneiro nesse negócio de deploy contínuo, você pode ver um pouco mais sobre isso nessa outra palestra:</p>

<iframe src="http://blip.tv/play/AYGMoH8C.html" width="480" height="300" frameborder="0" allowfullscreen></iframe>


<p><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#AYGMoH8C" style="display:none"></embed></p>

<h2>Continua ..</h2>

<div id="litlebox">
Você está lendo a Parte 1 sobre "A Busca pelo deploy contínuo" esse post tem mais duas continuações: <a href="http://lornlab.org/blog/2011/12/02/a-busca-pelo-deploy-continuo-parte-2/">Parte 2</a> e <a href="blog/2011/12/03/a-busca-pelo-deploy-continuo-parte-3/">Parte 3.</a>
</div>



]]></content>
  </entry>
  
</feed>
